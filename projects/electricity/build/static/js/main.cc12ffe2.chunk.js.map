{"version":3,"sources":["components/CarbonIntensityBar.tsx","components/RegionElectricity.tsx","hooks/useCurrentLocation .tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CarbonIntensityBar","props","gradient","colors","className","style","background","headers","Headers","append","process","0","200","400","600","800","RegionElectricity","useState","location","setLocation","error","setError","successHandler","coords","latitude","longitude","errorHandler","message","useEffect","geo","navigator","geolocation","locationWatch","watchPosition","clearWatch","useCurrentLocation","carbonIntensity","setCarbonIntensity","powerConsumptionBreakdown","setPowerConsumptionBreakdown","fetch","then","response","json","data","result","datetime","backgroundColor","moment","format","renewablePercentage","fossilFreePercentage","width","biomass","powerConsumptionTotal","Math","round","coal","gas","geothermal","hydro","nuclear","oil","solar","unknown","wind","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTASO,SAASA,EAAmBC,GACjC,IAAMC,EAAQ,kCAA8BD,EAAME,OAAO,GAA3C,gBAAuDF,EAAME,OAAO,KAApE,kBAAoFF,EAAME,OAAO,KAAjG,kBAAiHF,EAAME,OAAO,KAA9H,kBAA8IF,EAAME,OAAO,KAA3J,WACd,OACE,sBAAKC,UAAU,UAAf,UACE,oEACA,sBAAKA,UAAU,aAAaC,MAAO,CAAEC,WAAYJ,GAAjD,UACE,qBAAKE,UAAU,QAAf,eACA,qBAAKA,UAAU,UAAf,iBACA,qBAAKA,UAAU,UAAf,iBACA,qBAAKA,UAAU,UAAf,iBACA,qBAAKA,UAAU,UAAf,uBCcR,IACMG,EAAU,IAAIC,QACpBD,EAAQE,OAAO,aAFgBC,wBAI/B,IAAMP,EAAiB,CACnBQ,EAAG,mBACHC,IAAK,oBACLC,IAAK,oBACLC,IAAK,qBACLC,IAAK,mBAGF,SAASC,IAAqB,IAAD,ECrCF,WAAiB,IAAD,EACdC,mBAAS,IADK,mBACvCC,EADuC,KAC7BC,EAD6B,OAEpBF,mBAAS,IAFW,mBAEvCG,EAFuC,KAEhCC,EAFgC,KAIxCC,EAAiB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,OACtBJ,EAAY,CACRK,SAAUD,EAAOC,SACjBC,UAAWF,EAAOE,aAIpBC,EAAe,SAACN,GAAD,OAAgBC,EAASD,EAAMO,UAepD,OAbAC,qBAAU,WACN,IAAMC,EAAMC,UAAUC,YAGtB,GAAKF,EAAL,CAKA,IAAMG,EAAgBH,EAAII,cAAcX,EAAgBI,GACxD,OAAO,kBAAMG,EAAIK,WAAWF,IALxBX,EAAS,kCAMd,IAEI,2BAAKH,GAAZ,IAAsBE,UDYiBe,GAA/BX,EADwB,EACxBA,SAAUC,EADc,EACdA,UAAWL,EADG,EACHA,MADG,EAK5BH,mBAAiC,MALL,mBAG5BmB,EAH4B,KAI5BC,EAJ4B,OAS5BpB,mBAA2C,MATf,mBAO5BqB,EAP4B,KAQ5BC,EAR4B,KAWhCX,qBAAU,WACNY,MAAM,gEAAD,OAC+DhB,EAD/D,gBAC+EC,GAChF,CACIlB,QAASA,IAGZkC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUP,EAAmBO,MAEvCJ,MAAM,2EAAD,OAC0EhB,EAD1E,gBAC0FC,GAC3F,CACIlB,QAASA,IAGZkC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACI,GAAD,OAAYN,EAA6BM,QACpD,CAACrB,EAAUC,EAAX,OAAsBW,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAiBU,WAG1C,IAAIC,EAAkB,QAatB,OAXIA,EADAX,IAAkC,OAAfA,QAAe,IAAfA,OAAA,EAAAA,EAAiBA,iBAAkB,IACpCjC,EAAO,GAClBiC,IAAkC,OAAfA,QAAe,IAAfA,OAAA,EAAAA,EAAiBA,iBAAkB,IAC3CjC,EAAO,KAClBiC,IAAkC,OAAfA,QAAe,IAAfA,OAAA,EAAAA,EAAiBA,iBAAkB,IAC3CjC,EAAO,KAClBiC,IAAkC,OAAfA,QAAe,IAAfA,OAAA,EAAAA,EAAiBA,iBAAkB,IAC3CjC,EAAO,KAEPA,EAAO,KAIzB,mCACKiB,EACG,gCACI,2GACA,2GAGJ,gCACI,oBAAIhB,UAAU,UAAd,sDACCgC,GACG,sBAAKhC,UAAU,eAAf,UACK,IADL,KAEO,IACF4C,IAAOZ,EAAgBU,UAAUG,OAAO,8BAGjD,sBAAK7C,UAAU,mBAAf,UACKgC,GACG,sBAAKhC,UAAU,cAAf,UACI,sBAAKA,UAAU,cAAcC,MAAO,CAAE0C,gBAAiBA,GAAvD,UACI,qBAAK3C,UAAU,UAAf,SAA0BgC,EAAgBA,kBAC1C,qBAAKhC,UAAU,UAAf,kCAEJ,sDAGPkC,GACG,sBAAKlC,UAAU,cAAf,UACI,sBAAKA,UAAU,wBAAf,UACKkC,EAA0BY,oBAD/B,OAGA,+CAGPZ,GACG,sBAAKlC,UAAU,cAAf,UACI,sBAAKA,UAAU,wBAAf,UACKkC,EAA0Ba,qBAD/B,OAGA,oDAKZ,cAACnD,EAAD,CAAoBG,OAAQA,IAE3BmC,GACG,sBAAKlC,UAAU,UAAf,sCAC6B,uBACxBkC,EAA0BA,2BACvB,8BACI,gCACI,kCACI,+BACI,yCACA,qBAAIlC,UAAU,MAAd,UACI,qBACIA,UAAU,oBACVC,MAAO,CACH+C,MAGQ,IAFHd,EAA0BA,0BACtBe,QAEL,IACA,OAGXf,EAA0BgB,uBACvB,qBAAKlD,UAAU,QAAf,SACKmD,KAAKC,MAGE,IAFHlB,EAA0BA,0BACtBe,QAELf,EAA0BgB,uBAE1B,6DAKpB,+BACI,sCACA,qBAAIlD,UAAU,MAAd,UACI,qBACIA,UAAU,iBACVC,MAAO,CACH+C,MAGQ,IAFHd,EAA0BA,0BACtBmB,KAEL,IACA,OAGXnB,EAA0BgB,uBACvB,qBAAKlD,UAAU,QAAf,SACKmD,KAAKC,MAGE,IAFHlB,EAA0BA,0BACtBmB,KAELnB,EAA0BgB,uBAC1B,0DAKpB,+BACI,qCACA,qBAAIlD,UAAU,MAAd,UACI,qBACIA,UAAU,gBACVC,MAAO,CACH+C,MAGQ,IAFHd,EAA0BA,0BACtBoB,IAEL,IACA,OAGXpB,EAA0BgB,uBACvB,qBAAKlD,UAAU,QAAf,SACKmD,KAAKC,MAGE,IAFHlB,EAA0BA,0BACtBoB,IAELpB,EAA0BgB,uBAC1B,yDAKpB,+BACI,4CACA,qBAAIlD,UAAU,MAAd,UACI,qBACIA,UAAU,uBACVC,MAAO,CACH+C,MAGQ,IAFHd,EAA0BA,0BACtBqB,WAEL,IACA,OAGXrB,EAA0BgB,uBACvB,qBAAKlD,UAAU,QAAf,SACKmD,KAAKC,MAGE,IAFHlB,EAA0BA,0BACtBqB,WAELrB,EAA0BgB,uBAE1B,gEAKpB,+BACI,uCACA,qBAAIlD,UAAU,MAAd,UACI,qBACIA,UAAU,kBACVC,MAAO,CACH+C,MAGQ,IAFHd,EAA0BA,0BACtBsB,MAEL,IACA,OAGXtB,EAA0BgB,uBACvB,qBAAKlD,UAAU,QAAf,SACKmD,KAAKC,MAGE,IAFHlB,EAA0BA,0BACtBsB,MAELtB,EAA0BgB,uBAE1B,2DAKpB,+BACI,yCACA,qBAAIlD,UAAU,MAAd,UACI,qBACIA,UAAU,oBACVC,MAAO,CACH+C,MAGQ,IAFHd,EAA0BA,0BACtBuB,QAEL,IACA,OAGXvB,EAA0BgB,uBACvB,qBAAKlD,UAAU,QAAf,SACKmD,KAAKC,MAGE,IAFHlB,EAA0BA,0BACtBuB,QAELvB,EAA0BgB,uBAE1B,6DAKpB,+BACI,qCACA,qBAAIlD,UAAU,MAAd,UACI,qBACIA,UAAU,gBACVC,MAAO,CACH+C,MAGQ,IAFHd,EAA0BA,0BACtBwB,IAEL,IACA,OAGXxB,EAA0BgB,uBACvB,qBAAKlD,UAAU,QAAf,SACKmD,KAAKC,MAGE,IAFHlB,EAA0BA,0BACtBwB,IAELxB,EAA0BgB,uBAC1B,yDAKpB,+BACI,uCACA,qBAAIlD,UAAU,MAAd,UACI,qBACIA,UAAU,kBACVC,MAAO,CACH+C,MAGQ,IAFHd,EAA0BA,0BACtByB,MAEL,IACA,OAGXzB,EAA0BgB,uBACvB,qBAAKlD,UAAU,QAAf,SACKmD,KAAKC,MAGE,IAFHlB,EAA0BA,0BACtByB,MAELzB,EAA0BgB,uBAE1B,2DAKpB,+BACI,yCACA,qBAAIlD,UAAU,MAAd,UACI,qBACIA,UAAU,oBACVC,MAAO,CACH+C,MAGQ,IAFHd,EAA0BA,0BACtB0B,QAEL,IACA,OAGX1B,EAA0BgB,uBACvB,qBAAKlD,UAAU,QAAf,SACKmD,KAAKC,MAGE,IAFHlB,EAA0BA,0BACtB0B,QAEL1B,EAA0BgB,uBAE1B,6DAKpB,+BACI,sCACA,qBAAIlD,UAAU,MAAd,UACI,qBACIA,UAAU,iBACVC,MAAO,CACH+C,MAGQ,IAFHd,EAA0BA,0BACtB2B,KAEL,IACA,OAGX3B,EAA0BgB,uBACvB,qBAAKlD,UAAU,QAAf,SACKmD,KAAKC,MAGE,IAFHlB,EAA0BA,0BACtB2B,KAEL3B,EAA0BgB,uBAC1B,yEExYjDY,MATf,WAEE,OACE,qBAAK9D,UAAU,eAAf,SACE,cAACY,EAAD,OCMSmD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cc12ffe2.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport \"../styles/typography.css\";\r\nimport \"../styles/carbon-intensity.css\";\r\nimport { Colors } from '../types';\r\n\r\ninterface IProps {\r\n  colors: Colors\r\n}\r\n\r\nexport function CarbonIntensityBar(props: IProps) {\r\n  const gradient = `linear-gradient(90deg,  ${props.colors['0']} 0%, ${props.colors['200']}  20%, ${props.colors['400']}  45%, ${props.colors['600']}  70%, ${props.colors['800']}  100%)`\r\n  return (\r\n    <div className=\"text-sm\">\r\n      <div>Carbon intencity(gCOâ‚‚eq/kWh)</div>\r\n      <div className=\"carbon-bar\" style={{ background: gradient }}>\r\n        <div className=\"bar-0\">0</div>\r\n        <div className=\"bar-200\">200</div>\r\n        <div className=\"bar-400\">400</div>\r\n        <div className=\"bar-600\">600</div>\r\n        <div className=\"bar-800\">800</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { useCurrentLocation } from \"../hooks/useCurrentLocation \";\r\nimport \"../styles/region-electricity.css\";\r\nimport \"../styles/typography.css\";\r\nimport { CarbonIntensityBar } from \"./CarbonIntensityBar\";\r\nimport { Colors } from '../types';\r\n\r\ninterface CarbonIntensity {\r\n    carbonIntensity: number;\r\n    datetime?: Date;\r\n}\r\n\r\ninterface PowerConsumptionBreakdown {\r\n    fossilFreePercentage?: number;\r\n    powerConsumptionBreakdown?: {\r\n        biomass: number;\r\n        coal: number;\r\n        gas: number;\r\n        geothermal: number;\r\n        hydro: number;\r\n        hydroDischarge: number;\r\n        nuclear: number;\r\n        oil: number;\r\n        solar: number;\r\n        unknown: number;\r\n        wind: number;\r\n    };\r\n    powerConsumptionTotal?: number;\r\n    renewablePercentage: number;\r\n    datetime?: Date;\r\n}\r\n\r\nconst electricityMapAPIToken = process.env.REACT_APP_ELECTRICITY_MAP_API_TOKEN!;\r\nconst headers = new Headers();\r\nheaders.append(\"auth-token\", electricityMapAPIToken);\r\n\r\nconst colors: Colors = {\r\n    0: 'rgba(68,245,8,1)',\r\n    200: 'rgba(255,239,0,1)',\r\n    400: 'rgba(212,122,0,1)',\r\n    600: 'rgba(126,100,3, 1)',\r\n    800: 'rgba(50,0,80,1)'\r\n}\r\n\r\nexport function RegionElectricity() {\r\n    const { latitude, longitude, error } = useCurrentLocation();\r\n    const [\r\n        carbonIntensity,\r\n        setCarbonIntensity,\r\n    ] = useState<CarbonIntensity | null>(null);\r\n    const [\r\n        powerConsumptionBreakdown,\r\n        setPowerConsumptionBreakdown,\r\n    ] = useState<PowerConsumptionBreakdown | null>(null);\r\n\r\n    useEffect(() => {\r\n        fetch(\r\n            `https://api.electricitymap.org/v3/carbon-intensity/latest?lat${latitude}&lon=${longitude}`,\r\n            {\r\n                headers: headers,\r\n            }\r\n        )\r\n            .then((response) => response.json())\r\n            .then((data) => setCarbonIntensity(data));\r\n\r\n        fetch(\r\n            `https://api.electricitymap.org/v3/power-consumption-breakdown/latest?lat${latitude}&lon=${longitude}`,\r\n            {\r\n                headers: headers,\r\n            }\r\n        )\r\n            .then((response) => response.json())\r\n            .then((result) => setPowerConsumptionBreakdown(result));\r\n    }, [latitude, longitude, carbonIntensity?.datetime]);\r\n\r\n\r\n    let backgroundColor = 'white';\r\n    if (carbonIntensity && carbonIntensity?.carbonIntensity < 200) {\r\n        backgroundColor = colors['0'];\r\n    } else if (carbonIntensity && carbonIntensity?.carbonIntensity < 400) {\r\n        backgroundColor = colors['200'];\r\n    } else if (carbonIntensity && carbonIntensity?.carbonIntensity < 600) {\r\n        backgroundColor = colors['400'];\r\n    } else if (carbonIntensity && carbonIntensity?.carbonIntensity < 800) {\r\n        backgroundColor = colors['600'];\r\n    } else {\r\n        backgroundColor = colors['800'];\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {error ?\r\n                <div>\r\n                    <div>Unfortunately you can not see the information about the electricity :( .</div>\r\n                    <div> To see this information you need to allow access to your location ;)</div>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <h2 className=\"text-xl\">Electricity information at your location</h2>\r\n                    {carbonIntensity && (\r\n                        <div className=\"date text-sm\">\r\n                            {\" \"}\r\n                            at{\" \"}\r\n                            {moment(carbonIntensity.datetime).format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n                        </div>\r\n                    )}\r\n                    <div className=\"flex-row text-md\">\r\n                        {carbonIntensity && (\r\n                            <div className=\"box-wrapper\">\r\n                                <div className=\"box big-box\" style={{ backgroundColor: backgroundColor }}>\r\n                                    <div className=\"text-sm\">{carbonIntensity.carbonIntensity}</div>\r\n                                    <div className=\"text-xs\"> gCOâ‚‚eq/ kWh</div>\r\n                                </div>\r\n                                <div>carbon intensity</div>\r\n                            </div>\r\n                        )}\r\n                        {powerConsumptionBreakdown && (\r\n                            <div className=\"box-wrapper\">\r\n                                <div className=\"box small-box text-sm\">\r\n                                    {powerConsumptionBreakdown.renewablePercentage}%\r\n            </div>\r\n                                <div>renewable</div>\r\n                            </div>\r\n                        )}\r\n                        {powerConsumptionBreakdown && (\r\n                            <div className=\"box-wrapper\">\r\n                                <div className=\"box small-box text-sm\">\r\n                                    {powerConsumptionBreakdown.fossilFreePercentage}%\r\n            </div>\r\n                                <div>fossil free</div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    <CarbonIntensityBar colors={colors} />\r\n\r\n                    {powerConsumptionBreakdown && (\r\n                        <div className=\"text-md\">\r\n                            Electricity consumption: <br />\r\n                            {powerConsumptionBreakdown.powerConsumptionBreakdown && (\r\n                                <div>\r\n                                    <table>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>biomass</td>\r\n                                                <td className=\"bar\">\r\n                                                    <div\r\n                                                        className=\"color-bar biomass\"\r\n                                                        style={{\r\n                                                            width:\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .biomass *\r\n                                                                    100) /\r\n                                                                1000 +\r\n                                                                \"%\",\r\n                                                        }}\r\n                                                    ></div>\r\n                                                    {powerConsumptionBreakdown.powerConsumptionTotal && (\r\n                                                        <div className=\"popup\">\r\n                                                            {Math.round(\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .biomass *\r\n                                                                    100) /\r\n                                                                powerConsumptionBreakdown.powerConsumptionTotal\r\n                                                            ) +\r\n                                                                \"% of electricity in your region comes from biomass\"}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>coal</td>\r\n                                                <td className=\"bar\">\r\n                                                    <div\r\n                                                        className=\"color-bar coal\"\r\n                                                        style={{\r\n                                                            width:\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .coal *\r\n                                                                    100) /\r\n                                                                1000 +\r\n                                                                \"%\",\r\n                                                        }}\r\n                                                    ></div>\r\n                                                    {powerConsumptionBreakdown.powerConsumptionTotal && (\r\n                                                        <div className=\"popup\">\r\n                                                            {Math.round(\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .coal *\r\n                                                                    100) /\r\n                                                                powerConsumptionBreakdown.powerConsumptionTotal\r\n                                                            ) + \"% of electricity in your region comes from coal\"}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>gas</td>\r\n                                                <td className=\"bar\">\r\n                                                    <div\r\n                                                        className=\"color-bar gas\"\r\n                                                        style={{\r\n                                                            width:\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .gas *\r\n                                                                    100) /\r\n                                                                1000 +\r\n                                                                \"%\",\r\n                                                        }}\r\n                                                    ></div>\r\n                                                    {powerConsumptionBreakdown.powerConsumptionTotal && (\r\n                                                        <div className=\"popup\">\r\n                                                            {Math.round(\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .gas *\r\n                                                                    100) /\r\n                                                                powerConsumptionBreakdown.powerConsumptionTotal\r\n                                                            ) + \"% of electricity in your region comes from gas\"}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>geothermal</td>\r\n                                                <td className=\"bar\">\r\n                                                    <div\r\n                                                        className=\"color-bar geothermal\"\r\n                                                        style={{\r\n                                                            width:\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .geothermal *\r\n                                                                    100) /\r\n                                                                1000 +\r\n                                                                \"%\",\r\n                                                        }}\r\n                                                    ></div>\r\n                                                    {powerConsumptionBreakdown.powerConsumptionTotal && (\r\n                                                        <div className=\"popup\">\r\n                                                            {Math.round(\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .geothermal *\r\n                                                                    100) /\r\n                                                                powerConsumptionBreakdown.powerConsumptionTotal\r\n                                                            ) +\r\n                                                                \"% of electricity in your region comes from geothermal\"}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>hydro</td>\r\n                                                <td className=\"bar\">\r\n                                                    <div\r\n                                                        className=\"color-bar hydro\"\r\n                                                        style={{\r\n                                                            width:\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .hydro *\r\n                                                                    100) /\r\n                                                                1000 +\r\n                                                                \"%\",\r\n                                                        }}\r\n                                                    ></div>\r\n                                                    {powerConsumptionBreakdown.powerConsumptionTotal && (\r\n                                                        <div className=\"popup\">\r\n                                                            {Math.round(\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .hydro *\r\n                                                                    100) /\r\n                                                                powerConsumptionBreakdown.powerConsumptionTotal\r\n                                                            ) +\r\n                                                                \"% of electricity in your region comes from hydro\"}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>nuclear</td>\r\n                                                <td className=\"bar\">\r\n                                                    <div\r\n                                                        className=\"color-bar nuclear\"\r\n                                                        style={{\r\n                                                            width:\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .nuclear *\r\n                                                                    100) /\r\n                                                                1000 +\r\n                                                                \"%\",\r\n                                                        }}\r\n                                                    ></div>\r\n                                                    {powerConsumptionBreakdown.powerConsumptionTotal && (\r\n                                                        <div className=\"popup\">\r\n                                                            {Math.round(\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .nuclear *\r\n                                                                    100) /\r\n                                                                powerConsumptionBreakdown.powerConsumptionTotal\r\n                                                            ) +\r\n                                                                \"% of electricity in your region comes from nuclear\"}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>oil</td>\r\n                                                <td className=\"bar\">\r\n                                                    <div\r\n                                                        className=\"color-bar oil\"\r\n                                                        style={{\r\n                                                            width:\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .oil *\r\n                                                                    100) /\r\n                                                                1000 +\r\n                                                                \"%\",\r\n                                                        }}\r\n                                                    ></div>\r\n                                                    {powerConsumptionBreakdown.powerConsumptionTotal && (\r\n                                                        <div className=\"popup\">\r\n                                                            {Math.round(\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .oil *\r\n                                                                    100) /\r\n                                                                powerConsumptionBreakdown.powerConsumptionTotal\r\n                                                            ) + \"% of electricity in your region comes from oil\"}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>solar</td>\r\n                                                <td className=\"bar\">\r\n                                                    <div\r\n                                                        className=\"color-bar solar\"\r\n                                                        style={{\r\n                                                            width:\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .solar *\r\n                                                                    100) /\r\n                                                                1000 +\r\n                                                                \"%\",\r\n                                                        }}\r\n                                                    ></div>\r\n                                                    {powerConsumptionBreakdown.powerConsumptionTotal && (\r\n                                                        <div className=\"popup\">\r\n                                                            {Math.round(\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .solar *\r\n                                                                    100) /\r\n                                                                powerConsumptionBreakdown.powerConsumptionTotal\r\n                                                            ) +\r\n                                                                \"% of electricity in your region comes from solar\"}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>unknown</td>\r\n                                                <td className=\"bar\">\r\n                                                    <div\r\n                                                        className=\"color-bar unknown\"\r\n                                                        style={{\r\n                                                            width:\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .unknown *\r\n                                                                    100) /\r\n                                                                1000 +\r\n                                                                \"%\",\r\n                                                        }}\r\n                                                    ></div>\r\n                                                    {powerConsumptionBreakdown.powerConsumptionTotal && (\r\n                                                        <div className=\"popup\">\r\n                                                            {Math.round(\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .unknown *\r\n                                                                    100) /\r\n                                                                powerConsumptionBreakdown.powerConsumptionTotal\r\n                                                            ) +\r\n                                                                \"% of electricity in your region comes from unknown\"}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>wind</td>\r\n                                                <td className=\"bar\">\r\n                                                    <div\r\n                                                        className=\"color-bar wind\"\r\n                                                        style={{\r\n                                                            width:\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .wind *\r\n                                                                    100) /\r\n                                                                1000 +\r\n                                                                \"%\",\r\n                                                        }}\r\n                                                    ></div>\r\n                                                    {powerConsumptionBreakdown.powerConsumptionTotal && (\r\n                                                        <div className=\"popup\">\r\n                                                            {Math.round(\r\n                                                                (powerConsumptionBreakdown.powerConsumptionBreakdown\r\n                                                                    .wind *\r\n                                                                    100) /\r\n                                                                powerConsumptionBreakdown.powerConsumptionTotal\r\n                                                            ) + \"% of electricity in your region comes from wind\"}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>}\r\n        </>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\n\r\ninterface Location {\r\n    latitude?: number;\r\n    longitude?: number;\r\n    error?: string;\r\n}\r\n\r\nexport const useCurrentLocation = (): Location => {\r\n    const [location, setLocation] = useState({});\r\n    const [error, setError] = useState('');\r\n\r\n    const successHandler = ({ coords }: any) => {\r\n        setLocation({\r\n            latitude: coords.latitude,\r\n            longitude: coords.longitude,\r\n        });\r\n    };\r\n\r\n    const errorHandler = (error: any) => setError(error.message);\r\n\r\n    useEffect(() => {\r\n        const geo = navigator.geolocation;\r\n\r\n\r\n        if (!geo) {\r\n            setError('Geolocation is not supported');\r\n            return;\r\n        }\r\n\r\n        const locationWatch = geo.watchPosition(successHandler, errorHandler);\r\n        return () => geo.clearWatch(locationWatch);\r\n    }, []);\r\n\r\n    return { ...location, error };\r\n}","import React from 'react';\nimport './App.css';\nimport { RegionElectricity } from './components/RegionElectricity';\n\nfunction App() {\n\n  return (\n    <div className=\"main-wrapper\">\n      <RegionElectricity />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}