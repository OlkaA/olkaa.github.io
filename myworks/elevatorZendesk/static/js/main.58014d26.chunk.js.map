{"version":3,"sources":["elevator/elevator.js","elevator/renderElevator.js","App.js","serviceWorker.js","index.js"],"names":["Elevator","numberOfFloors","elevatorSpeed","this","currentPosition","floorChangedEventHandlers","isElevatorWorking","timeoutInstance","handler","push","clearTimeout","floor","Promise","reject","resolve","moveElevator","callback","self","setTimeout","forEach","renderElevator","props","elevator","onFloorChanged","setState","state","goToFloors","catch","console","log","stopElevator","floors","className","onClick","reverse","map","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"iSAAaA,EAAb,WACE,WAAYC,EAAgBC,GAAgB,oBAC1CC,KAAKF,eAAiBA,EACtBE,KAAKD,cAAgBA,EAErBC,KAAKC,gBAAkB,EACvBD,KAAKE,0BAA4B,GACjCF,KAAKG,mBAAoB,EACzBH,KAAKI,gBAAkB,KAR3B,2DAWiBC,GACbL,KAAKE,0BAA0BI,KAAKD,KAZxC,2CAgBI,OAAOL,KAAKC,kBAhBhB,qCAoBID,KAAKG,mBAAoB,EACtBH,KAAKI,iBACNG,aAAaP,KAAKI,mBAtBxB,iCA0BaI,GAAQ,IAAD,OAChB,OAAIR,KAAKG,kBACAM,QAAQC,UAGjBV,KAAKG,mBAAoB,EAElB,IAAIM,SAAQ,SAACE,EAASD,GACzB,EAAKE,aAAaJ,EAAOG,SAlCjC,mCAsCeH,EAAOK,GAAW,IAAD,OAC5B,GAAIb,KAAKG,kBAAT,CAGA,IAAMW,EAAOd,KACPc,EAAKb,kBAAoBO,GAC3BM,EAAKX,mBAAoB,EACzBU,EAASC,EAAKb,kBAEdD,KAAKI,gBAAkBW,YAAW,WAC5BD,EAAKb,gBAAkBO,EACrBM,EAAKb,gBAAkB,EAAKH,eAC9BgB,EAAKb,gBAAkBa,EAAKb,gBAAkB,GAE9Ca,EAAKb,gBAAkBa,EAAKb,gBAAiB,EAC7CO,IAAiB,GAGfM,EAAKb,gBAAkB,EACzBa,EAAKb,gBAAkBa,EAAKb,gBAAkB,GAE9Ca,EAAKb,gBAAkBa,EAAKb,gBAAkB,EAC9CO,IAAiB,GAGrBM,EAAKZ,0BAA0Bc,SAAQ,SAAAX,GACrCA,EAAQS,EAAKb,oBAEfa,EAAKF,aAAaJ,EAAOK,KACxBC,EAAKf,oBAnEhB,KCIqBkB,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,SAAW,IAAItB,EAAS,EAAKqB,MAAMpB,eAAgB,EAAKoB,MAAMnB,eACnE,EAAKoB,SAASC,gBAAgB,kBAAM,EAAKC,SAAS,CAAEpB,gBAAiB,EAAKkB,SAASlB,qBAEnF,EAAKqB,MAAQ,CACXrB,gBAAiB,EAAKkB,SAASlB,iBAPhB,E,wEAWRO,GACTR,KAAKmB,SAASI,WAAWf,GAAOgB,OAAM,kBAAMC,QAAQC,IAAI,2B,qCAIxD1B,KAAKmB,SAASQ,iB,+BAKd,IAFQ,IAAD,OACDC,EAAS,GACNpB,EAAQ,EAAGA,EAAQR,KAAKmB,SAASrB,eAAgBU,IACxDoB,EAAOtB,KAAKE,EAAQ,GAGtB,OACE,yBAAKqB,UAAU,YACb,uBAAGA,UAAU,aAAaC,QAAS,kBAAM,EAAKH,iBAA9C,iBACA,uBAAGE,UAAU,iBAAiBC,QAAS,kBAAM,EAAKP,WAAW,EAAKJ,SAASrB,eAAiB,KAA5F,iBACG8B,EAAOG,UAAUC,KAAI,SAAAxB,GACtB,OACE,uBACEyB,IAAKzB,EACLsB,QAAS,kBAAM,EAAKP,WAAWf,IAC/BqB,UAAS,gBAAWrB,IAAU,EAAKc,MAAMrB,gBAAkB,iBAAmB,KAE7EO,W,GArC6B0B,cCY7BC,MAZf,WACE,OAEE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAAlB,mBAEQ,kBAAC,EAAD,CAAgB/B,eAAgB,EAAGC,cAAe,SCE5CqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.58014d26.chunk.js","sourcesContent":["export class Elevator {\r\n  constructor(numberOfFloors, elevatorSpeed) {\r\n    this.numberOfFloors = numberOfFloors;\r\n    this.elevatorSpeed = elevatorSpeed;\r\n\r\n    this.currentPosition = 1;\r\n    this.floorChangedEventHandlers = [];\r\n    this.isElevatorWorking = false;\r\n    this.timeoutInstance = null;\r\n  }\r\n\r\n  onFloorChanged(handler) {\r\n    this.floorChangedEventHandlers.push(handler);\r\n  }\r\n\r\n  getCurrentPosition() {\r\n    return this.currentPosition;\r\n  }\r\n\r\n  stopElevator() {\r\n    this.isElevatorWorking = false;\r\n    if(this.timeoutInstance){\r\n      clearTimeout(this.timeoutInstance);\r\n    }\r\n  }\r\n\r\n  goToFloors(floor) {\r\n    if( this.isElevatorWorking  ) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    this.isElevatorWorking = true;\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.moveElevator(floor, resolve); \r\n      })\r\n  }\r\n\r\n  moveElevator(floor, callback) {\r\n    if(!this.isElevatorWorking){\r\n      return\r\n    }\r\n    const self = this;\r\n      if (self.currentPosition === floor) {\r\n        self.isElevatorWorking = false;\r\n        callback(self.currentPosition);\r\n      } else {\r\n        this.timeoutInstance = setTimeout(() => {\r\n          if (self.currentPosition < floor) {\r\n            if (self.currentPosition < this.numberOfFloors){\r\n              self.currentPosition = self.currentPosition + 1;\r\n            } else {\r\n              self.currentPosition = self.currentPosition -1;\r\n              floor = floor * -1;\r\n            }\r\n          } else {\r\n            if (self.currentPosition > 1 ){\r\n              self.currentPosition = self.currentPosition - 1;\r\n            } else {\r\n              self.currentPosition = self.currentPosition + 1;\r\n              floor = floor * -1;\r\n            }\r\n          }\r\n          self.floorChangedEventHandlers.forEach(handler => {\r\n            handler(self.currentPosition);\r\n          });\r\n          self.moveElevator(floor, callback);\r\n        }, self.elevatorSpeed);\r\n      }\r\n  }\r\n}","import { Elevator } from \"./elevator\";\r\nimport React, { Component } from \"react\";\r\nimport \"./renderElevator.css\";\r\n\r\nexport default class renderElevator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.elevator = new Elevator(this.props.numberOfFloors, this.props.elevatorSpeed);\r\n    this.elevator.onFloorChanged( () => this.setState({ currentPosition: this.elevator.currentPosition}) )\r\n    \r\n    this.state = {\r\n      currentPosition: this.elevator.currentPosition\r\n    };\r\n  }\r\n\r\n  goToFloors(floor){\r\n    this.elevator.goToFloors(floor).catch(() => console.log('elevator is moving'));\r\n  }\r\n\r\n  stopElevator(){\r\n    this.elevator.stopElevator();\r\n  }\r\n\r\n  render() {\r\n    const floors = [];\r\n    for (let floor = 0; floor < this.elevator.numberOfFloors; floor++) {\r\n      floors.push(floor + 1);\r\n    }\r\n\r\n    return (\r\n      <div className=\"elevator\">\r\n        <a className=\"floor stop\" onClick={() => this.stopElevator()}>Stop elevator</a>\r\n        <a className=\"floor infinite\" onClick={() => this.goToFloors(this.elevator.numberOfFloors + 1)}>Infinite move</a>\r\n          {floors.reverse().map(floor => {\r\n          return (\r\n            <a\r\n              key={floor}\r\n              onClick={() => this.goToFloors(floor)}\r\n              className={`floor ${floor === this.state.currentPosition ? ' floor--active' : ''}`}\r\n            >\r\n              {floor}\r\n            </a>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n};","import React from \"react\";\nimport \"./App.css\";\nimport RenderElevator from './elevator/renderElevator';\n\nfunction App() {\n  return (\n    \n    <div className=\"App\"> \n      <header className=\"App-header\"> \n              Zendesk Elevator\n              <RenderElevator numberOfFloors={7} elevatorSpeed={1000}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}