{"version":3,"sources":["components/Loading.jsx","context/context.js","components/Error.jsx","components/Users.jsx","components/Input.jsx","api/index.js","components/MainComponent.jsx","config.js","components/UserProfile.jsx","components/About.jsx","App.js","serviceWorker.js","index.js"],"names":["Loading","contextState","users","userName","isLoading","errorText","StateContext","React","createContext","Error","Consumer","className","Users","userList","this","props","data","map","user","path","login","key","id","to","error","class","Component","Input","state","value","handleChange","bind","event","setState","target","updateData","type","placeholder","onChange","gitAPI","myAccount","fetchGitUsers","a","fetch","response","status","json","statusText","MainComponent","getFetchData","API","resp","items","Provider","userTags","label","UserProfile","avatar_url","name","userTag","tag","idx","src","alt","About","App","exact","render","match","params","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5bb942ca.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Loading() {\n  return <div>Loading...</div>;\n}\n","import React from \"react\";\r\n//import * as API from \"../api/index\";\r\n\r\nexport const contextState = {\r\n  users: [],\r\n  userName: '',\r\n  isLoading: false,\r\n  errorText: ''\r\n};\r\n\r\nexport const StateContext = React.createContext({\r\n  contextState: contextState // default value\r\n});\r\n","import React from \"react\";\nimport { StateContext } from \"../context/context\";\n\nexport default function Error() {\n  return (\n    <StateContext.Consumer>\n      {({ errorText }) => {\n        return (\n          <div className=\"error\">Error: {errorText}</div>\n        )\n      }}\n    </StateContext.Consumer>)\n}\n","import React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport Loading from \"./Loading\";\r\n// import NoResults from './NoResults';\r\nimport Error from './Error';\r\nimport { StateContext } from \"../context/context\";\r\n\r\nexport default class Users extends Component {\r\n\r\n  render() {\r\n\r\n    const userList = this.props.data.users.map(user => {\r\n      const path = `/users/${user.login}`;\r\n      return (<li key={user.id}>\r\n        <Link to={path}>\r\n          {user.login}\r\n        </Link>\r\n      </li>)\r\n    });\r\n\r\n    return (\r\n      <StateContext.Consumer>\r\n        {({ users, userName, isLoading, errorText }) => {\r\n          return (\r\n            <div>\r\n              <div className=\"loading\">\r\n                {isLoading && <Loading />}\r\n                {errorText && <Error error={errorText} />}\r\n\r\n              </div>\r\n              {/* {!userName && <NoResults />} */}\r\n              <ul class=\"user-list\">\r\n                {userList}\r\n              </ul>\r\n            </div>\r\n          )\r\n        }\r\n        }\r\n      </StateContext.Consumer>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nclass Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value }, () => this.props.updateData(this.state.value));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search user...\"\r\n        value={this.state.value}\r\n        onChange={this.handleChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","const gitAPI = `https://api.github.com/search/users`;\r\nconst myAccount =  `OlkaA`\r\nasync function fetchGitUsers(userName) {\r\n  let response;\r\n  if(!userName) {\r\n    response = await fetch(`${gitAPI}?q=${myAccount}`);\r\n  }\r\n  else{\r\n    response = await fetch(`${gitAPI}?q=${userName}`);\r\n  }\r\n  if (response.status === 200) {\r\n    return await response.json();\r\n  } else {\r\n    return response.statusText;\r\n  }\r\n}\r\n\r\nasync function fetchGitUser(userLogin) {\r\n  const response = await fetch(`${gitAPI}/${userLogin}`);\r\n  if (response.status === 200) {\r\n    return await response.json();\r\n  } else {\r\n    return response.statusText;\r\n  }\r\n}\r\n\r\nexport { fetchGitUsers, fetchGitUser};\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport Users from \"./Users\";\r\nimport Input from \"./Input\";\r\nimport * as API from \"../api\";\r\nimport { contextState, StateContext } from \"../context/context\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass MainComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            users: contextState.users,\r\n            userName: contextState.userName,\r\n            isLoading: contextState.isLoading,\r\n            errorText: contextState.errorText\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.getFetchData();\r\n    }\r\n\r\n    async getFetchData() {\r\n        //if (this.state.userName) {\r\n        this.setState({ isLoading: true });\r\n        const resp = await API.fetchGitUsers(this.state.userName);\r\n        const errorText = typeof resp === 'string' ? resp : null;\r\n        const users = resp.items || [];\r\n        this.setState({ users, isLoading: false, errorText: errorText });\r\n        //}\r\n    }\r\n\r\n    updateData = (value) => {\r\n        this.setState({ userName: value, users: [], errorText: '' }, () => this.getFetchData());\r\n    }\r\n\r\n    render() {\r\n        const { users, userName, isLoading, errorText } = this.state;\r\n        return (\r\n            <StateContext.Provider value={{ users, userName, isLoading, errorText }}>\r\n                <div className=\"App\">\r\n                    <Link to='/about' className=\"about\">\r\n                        About\r\n                    </Link>\r\n                    <h1>GitHub Users Search</h1>\r\n                    <Input updateData={this.updateData} />\r\n                    <Users data={this.state} />\r\n                </div>\r\n            </StateContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainComponent;\r\n","export const userTags = \r\n    [\r\n        {\r\n            label: 'About:',\r\n            value: 'bio'\r\n        },\r\n        {\r\n            label: 'Company:',\r\n            value: 'company'\r\n        },\r\n        {\r\n            label: 'Location:',\r\n            value: 'location'\r\n        },\r\n        {\r\n            label: 'Portfolio:',\r\n            value: 'blog'\r\n        },\r\n        {\r\n            label: 'Github:',\r\n            value: 'html_url'\r\n        },\r\n        {\r\n            label: 'Repositories:',\r\n            value: 'public_repos'\r\n        },\r\n    ]\r\n;\r\n\r\n\r\n// const classMates = [\r\n//     \"aina21\", \r\n//     \"berheg\",\r\n//     \"Laila1222\",\r\n//     \"Fatemeh-Pakpour\",\r\n//     \"rakhshanda-rashid\",\r\n//     \"OlkaA\",\r\n//     \"DEJENERUTA\",\r\n//     \"mo3ni\",\r\n//     \"abedaarabi\",\r\n//     \"azinkamran\",\r\n// ]\r\n\r\n//export default { userTags };","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { userTags } from '../config';\r\n\r\nclass UserProfile extends React.Component {\r\n    state = {\r\n        user: {}\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const { login } = this.props;\r\n        const resp = await fetch(`https://api.github.com/users/${login}`);\r\n        const user = await resp.json();\r\n        this.setState({ user });\r\n    }\r\n\r\n    render() {\r\n        const { avatar_url, name } = this.state.user;\r\n\r\n        const userTag = userTags.map((tag, idx) => {\r\n            return (\r\n                this.state.user[tag.value] && <li key={idx}>{tag.label} {this.state.user[tag.value]}</li>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <>\r\n                <Link to='/' className=\"arrow-back\">&larr;</Link>\r\n                <div className=\"flex\">\r\n                    <img src={avatar_url} alt={avatar_url} />\r\n                    <ul>\r\n                        {name && <li className=\"name\">{name}</li>}\r\n                        {userTag}\r\n                    </ul>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserProfile;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Link to='/' className=\"arrow-back\">&larr;</Link>\r\n                <div className=\"align-center\">\r\n                    <h1>Github</h1>\r\n                    <h2>is how people build software.</h2>\r\n                    <h4>At this project were used technologies</h4>\r\n                    <h4>and instruments such as</h4>\r\n                    <h4>React, SCSS, Github, JS, HTML, CSS3, Visual Code, brain.</h4>\r\n                    <p>Creator: Olha Afanasieva</p>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport './App.css';\nimport MainComponent from './components/MainComponent';\nimport UserProfile from './components/UserProfile';\nimport About from './components/About';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <MainComponent />\n        </Route>\n        <Route exact path=\"/users/:login\" render={({ match }) => <UserProfile login={match.params.login} />}\n        />\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n      </Switch>\n    </Router>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}