{"version":3,"sources":["components/InfoButton.jsx","components/UsersItem.jsx","components/Loading.jsx","context/context.js","components/Error.jsx","components/Users.jsx","components/Input.jsx","api/index.js","components/MainComponent.jsx","components/UserProfile.jsx","components/About.jsx","App.js","serviceWorker.js","index.js"],"names":["InfoButton","color","style","border","className","getColor","i","Math","floor","random","getRandomColor","UsersItem","props","userInfo","login","avatar_url","userColor","path","background","src","alt","to","Loading","contextState","users","userName","isLoading","errorText","StateContext","React","createContext","Error","Consumer","Users","error","data","map","user","key","id","Component","Input","state","value","handleChange","bind","event","this","setState","target","updateData","type","placeholder","onChange","gitAPI","userGitAPI","myAccount","fetchGitUsers","a","fetch","response","status","json","statusText","fetchDetailedInfoUser","MainComponent","getFetchData","API","resp","items","Provider","href","UserProfile","getUserData","name","bio","location","blog","followers","created_at","html_url","updated_at","public_repos","dates","moment","format","About","App","basename","exact","render","match","params","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2df5c0f7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../scss/index.scss\";\r\n\r\nconst InfoButton = ({ color }) => {\r\n  return (\r\n    <button style={{ border: `1px solid ${color}` }} className=\"infoButton\">\r\n      Detailed Info\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default InfoButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport InfoButton from \"./InfoButton\";\r\nimport \"../scss/index.scss\";\r\n\r\nfunction getRandomColor() {\r\n  var letters = \"0123456789ABCDEF\";\r\n  var color = \"#\";\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\nconst getColor = () => {\r\n  const color = getRandomColor();\r\n  return color;\r\n};\r\n\r\nexport const UsersItem = (props) => {\r\n  const { login, avatar_url } = props.userInfo;\r\n  const userColor = getColor();\r\n  const path = `/users/${login}`;\r\n\r\n  return (\r\n    <li\r\n      style={{\r\n        background: `linear-gradient(180deg, ${userColor} 33%, white 55%)`,\r\n        border: `1px solid ${userColor}`,\r\n      }}\r\n    >\r\n      <img src={avatar_url} alt={avatar_url} />\r\n      <p>{login}</p>\r\n      {\r\n        <Link to={path}>\r\n          <InfoButton color={userColor} />\r\n        </Link>\r\n      }\r\n    </li>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"../scss/index.scss\";\n\nexport default function Loading() {\n  return <div>Loading...</div>;\n}\n","import React from \"react\";\r\n\r\nexport const contextState = {\r\n  users: [],\r\n  userName: \"\",\r\n  isLoading: false,\r\n  errorText: \"\",\r\n};\r\n\r\nexport const StateContext = React.createContext({\r\n  contextState: contextState,\r\n});\r\n","import React from \"react\";\nimport { StateContext } from \"../context/context\";\nimport \"../scss/index.scss\";\n\nexport default function Error() {\n  return (\n    <StateContext.Consumer>\n      {({ errorText }) => {\n        return <div className=\"error\">Error: {errorText}</div>;\n      }}\n    </StateContext.Consumer>\n  );\n}\n","import React, { Component } from \"react\";\r\nimport { UsersItem } from \"./UsersItem\";\r\nimport Loading from \"./Loading\";\r\nimport Error from \"./Error\";\r\nimport { StateContext } from \"../context/context\";\r\nimport \"../scss/index.scss\";\r\n\r\nexport default class Users extends Component {\r\n  render() {\r\n    return (\r\n      <StateContext.Consumer>\r\n        {({ users, userName, isLoading, errorText }) => {\r\n          return (\r\n            <div>\r\n              <div className=\"loading\">\r\n                {isLoading && <Loading />}\r\n                {errorText && <Error error={errorText} />}\r\n              </div>\r\n              <ul className=\"user-list\">\r\n                {this.props.data.users.map((user) => {\r\n                  return <UsersItem userInfo={user} key={user.id} />;\r\n                })}\r\n              </ul>\r\n            </div>\r\n          );\r\n        }}\r\n      </StateContext.Consumer>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"../scss/index.scss\";\r\n\r\nclass Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value }, () =>\r\n      this.props.updateData(this.state.value)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        className=\"user-search\"\r\n        type=\"text\"\r\n        placeholder=\"Search user...\"\r\n        value={this.state.value}\r\n        onChange={this.handleChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","const gitAPI = `https://api.github.com/search/users`;\r\nconst userGitAPI = `https://api.github.com/users`;\r\nconst myAccount = `OlkaA`;\r\nasync function fetchGitUsers(userName) {\r\n  let response;\r\n  if (!userName) {\r\n    response = await fetch(`${gitAPI}?q=${myAccount}`);\r\n  } else {\r\n    response = await fetch(`${gitAPI}?q=${userName}`);\r\n  }\r\n  if (response.status === 200) {\r\n    return await response.json();\r\n  } else {\r\n    return response.statusText;\r\n  }\r\n}\r\n\r\nasync function fetchGitUser(userLogin) {\r\n  const response = await fetch(`${gitAPI}/${userLogin}`);\r\n  if (response.status === 200) {\r\n    return await response.json();\r\n  } else {\r\n    return response.statusText;\r\n  }\r\n}\r\n\r\nasync function fetchDetailedInfoUser(login) {\r\n  const response = await fetch(`${userGitAPI}/${login}`);\r\n  if (response.status === 200) {\r\n    return await response.json();\r\n  } else {\r\n    return response.statusText;\r\n  }\r\n}\r\n\r\nexport { fetchGitUsers, fetchGitUser, fetchDetailedInfoUser };\r\n","import React from \"react\";\r\nimport \"../scss/index.scss\";\r\nimport Users from \"./Users\";\r\nimport Input from \"./Input\";\r\nimport * as API from \"../api\";\r\nimport { contextState, StateContext } from \"../context/context\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass MainComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      users: contextState.users,\r\n      userName: contextState.userName,\r\n      isLoading: contextState.isLoading,\r\n      errorText: contextState.errorText,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.getFetchData();\r\n  }\r\n\r\n  async getFetchData() {\r\n    //if (this.state.userName) {\r\n    this.setState({ isLoading: true });\r\n    const resp = await API.fetchGitUsers(this.state.userName);\r\n    const errorText = typeof resp === \"string\" ? resp : null;\r\n    const users = resp.items || [];\r\n    this.setState({ users, isLoading: false, errorText: errorText });\r\n    //}\r\n  }\r\n\r\n  updateData = (value) => {\r\n    this.setState({ userName: value, users: [], errorText: \"\" }, () =>\r\n      this.getFetchData()\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { users, userName, isLoading, errorText } = this.state;\r\n    return (\r\n      <StateContext.Provider value={{ users, userName, isLoading, errorText }}>\r\n        <div className=\"app\">\r\n          <>\r\n          <a href=\"/about\" className=\"about\">\r\n            About\r\n          </a>\r\n          <h1>GitHub Users Search</h1>\r\n          <Input updateData={this.updateData} />\r\n          <Users data={this.state} />\r\n          </>\r\n        </div>\r\n      </StateContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainComponent;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport * as API from \"../api\";\r\nimport \"../scss/profile.scss\";\r\nimport \"../scss/index.scss\";\r\nclass UserProfile extends React.Component {\r\n  state = {\r\n    user: {},\r\n  };\r\n\r\n  async getUserData() {\r\n    const { login } = this.props;\r\n    this.setState({ isLoading: true });\r\n    const user = await API.fetchDetailedInfoUser(login);\r\n    this.setState({ user });\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.getUserData();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      avatar_url,\r\n      name,\r\n      bio,\r\n      location,\r\n      blog,\r\n      followers,\r\n      created_at,\r\n      html_url,\r\n      updated_at,\r\n      public_repos,\r\n    } = this.state.user;\r\n\r\n    const dates = `${moment(created_at).format(\"MMM Do YY\")} - ${moment(\r\n      updated_at\r\n    ).format(\"MMM Do YY\")}`;\r\n\r\n    return (\r\n        <div className=\"app profile\">\r\n          <div>\r\n            <img src={avatar_url} alt={avatar_url} />\r\n            <div>\r\n              {name && <div>{name}</div>}\r\n              {bio && <div className=\"bio\">{bio}</div>}\r\n            </div>\r\n          </div>\r\n          <div>\r\n            {location && <div>Location: {location}</div>}\r\n            {blog && (\r\n              <div>\r\n                Portfolio/Blog:{\" \"}\r\n                <a href={blog} target=\"_blank\">\r\n                  {blog}\r\n                </a>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"card\">\r\n            {created_at && updated_at && <div> {dates}</div>}\r\n            {public_repos && <div>Public repositories: {public_repos}</div>}\r\n            {followers && <div>Followers: {followers}</div>}\r\n            {html_url && (\r\n              <a href={html_url} target=\"_blank\">\r\n                Go to github\r\n              </a>\r\n            )}\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserProfile;\r\n","import React, { Component } from \"react\";\r\nimport \"../scss/index.scss\";\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"app align-center\">\r\n          <h1>Github</h1>\r\n          <h2>is how people build software.</h2>\r\n          <h4>At this project were used technologies</h4>\r\n          <h4>and instruments such as</h4>\r\n          <h4>React, SCSS, Github, JS, HTML, CSS3, Visual Code, brain.</h4>\r\n          <p>Creator: Olha Afanasieva</p>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\nimport MainComponent from \"./components/MainComponent\";\nimport UserProfile from \"./components/UserProfile\";\nimport About from \"./components/About\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router basename='/projects/githubUsers'>\n      <Switch>\n        <Route exact path=\"/\">\n          <MainComponent />\n        </Route>\n        <Route\n          exact\n          path=\"/users/:login\"\n          render={({ match }) => <UserProfile login={match.params.login} />}\n        />\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}