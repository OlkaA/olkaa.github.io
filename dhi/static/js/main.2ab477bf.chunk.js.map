{"version":3,"sources":["components/Navigation.jsx","data.js","components/Map.jsx","components/Graph.jsx","pages/InfoPage.jsx","pages/About.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","to","cykelDataAPI","cykelInfrastrukturAPI","a","fetch","response","json","data","features","Map","props","useState","cykelInfrastruktur","setCykelInfrastrukturData","map","useRef","isMountedRef","useEffect","marRef","current","getMap","fetchCykelData","then","on","addSource","type","route","properties","color","geometry","coordinates","addLayer","id","source","paint","fetchCykelInfrastrukturData","latitude","selectedPlace","lat","longitude","lon","zoom","bearing","pitch","viewport","setViewport","ref","width","height","mapStyle","onViewportChange","nextViewport","mapboxApiAccessToken","process","item","key","IconButton","aria-label","onClick","e","preventDefault","getSelectedPlace","style","backgroundColor","borderRadius","beskrivelse","Graph","graphData","setGraphData","res","renderedArray","timeseries","slice","object","name","time","instant","details","air_temperature","wind_speed","length","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","activeDot","r","MapPage","setSelectedPlace","Grid","container","justify","xs","sm","Typography","variant","value","linkStyle","textDecoration","About","List","component","ListItem","href","target","ListItemIcon","ListItemText","primary","Home","align","theme","createMuiTheme","App","basename","ThemeProvider","md","path","InfoPage","typography","h3","fontSize","breakpoints","up","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2RAsBeA,G,OAlBI,WACjB,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,aACZ,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,c,0CCdJC,EAAY,+IACZC,EAAqB,gL,4CAE3B,gCAAAC,EAAA,sEAC2BC,MAAMH,GADjC,cACUI,EADV,gBAEuBA,EAASC,OAFhC,cAEUC,EAFV,gBAGuBA,EAAKC,SAH5B,cAGUF,EAHV,yBAIWA,GAJX,6C,kEAOA,gCAAAH,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,gBAEuBA,EAASC,OAFhC,cAEUC,EAFV,gBAGuBA,EAAKC,SAH5B,cAGUF,EAHV,yBAIWA,GAJX,6C,qDC0GeG,MA7Gf,SAAaC,GAAQ,IAAD,EACsCC,mBAAS,IAD/C,mBACXC,EADW,KACSC,EADT,KAEZC,EAAMC,mBACNC,EAAeD,iBAAO,MAE5BE,qBAAU,WACR,IAAMC,EAASJ,EAAIK,QAAQC,SAC3BJ,EAAaG,SAAU,E,0CAEvBE,GAAiBC,MAAK,SAAChB,GAiCrB,OAhCIU,EAAaG,SACfD,EAAOK,GAAG,QAAQ,WAChBL,EAAOM,UAAU,QAAS,CACxBC,KAAM,UACNlB,KAAM,CACJkB,KAAM,oBACNjB,SAAUF,EAAKQ,KAAI,SAACY,GAClB,MAAO,CACLD,KAAM,UACNE,WAAY,CACVC,MAAO,WAETC,SAAU,CACRJ,KAAM,aACNK,YAAaJ,EAAMG,SAASC,YAAY,WAMlDZ,EAAOa,SAAS,CACdC,GAAI,QACJP,KAAM,OACNQ,OAAQ,QACRC,MAAO,CACL,aAAc,EACd,aAAc,CAAC,MAAO,eAMvB,kBAAOlB,EAAaG,SAAU,M,0CAGvCgB,GAA8Bb,MAAK,SAAChB,GAClCO,EAA0BP,QAE3B,IAhDe,MAkDcK,mBAAS,CACvCyB,SAAU1B,EAAM2B,cAAcC,IAC9BC,UAAW7B,EAAM2B,cAAcG,IAC/BC,KAAM,GACNC,QAAS,EACTC,MAAO,IAvDS,mBAkDXC,EAlDW,KAkDDC,EAlDC,KA0DlB,OACE,kBAAC,IAAD,eACEC,IAAKhC,GACD8B,EAFN,CAGEG,MAAM,OACNC,OAAO,OACPC,SAAS,kDACTC,iBAAkB,SAACC,GAAD,OAAkBN,EAAYM,IAChDC,qBApEuBC,2FAsEtBzC,EAAmBE,KAAI,SAACwC,GAAD,OACtB,yBAAKC,IAAKD,EAAKtB,IACb,kBAAC,IAAD,CACEO,UAAWe,EAAKzB,SAASC,YAAY,GAAG,GACxCM,SAAUkB,EAAKzB,SAASC,YAAY,GAAG,IAEvC,kBAAC0B,EAAA,EAAD,CACEC,aAAW,SACXC,QAAS,SAACC,GACRA,EAAEC,iBACF,IAAMvB,EAAgB,CACpBC,IAAKgB,EAAKzB,SAASC,YAAY,GAAG,GAClCU,IAAKc,EAAKzB,SAASC,YAAY,GAAG,IAEpCpB,EAAMmD,iBAAiBxB,KAGzB,kBAAC,IAAD,CACEyB,MAAO,CACLC,gBAAiB,UACjBnC,MAAO,UACPoC,aAAc,YAKrBV,EAAKzB,SAASC,YAAY,GAAG,KAAOpB,EAAM2B,cAAcG,KACvDc,EAAKzB,SAASC,YAAY,GAAG,KAAOpB,EAAM2B,cAAcC,KACtD,kBAAC,IAAD,CACEC,UAAW7B,EAAM2B,cAAcG,IAC/BJ,SAAU1B,EAAM2B,cAAcC,KAE7BgB,EAAK3B,WAAWsC,mB,QCtClBC,MA1Df,SAAexD,GAAQ,IACbH,EAASG,EAATH,KADY,EAEcI,mBAAS,MAFvB,mBAEbwD,EAFa,KAEFC,EAFE,KAIpBnD,qBAAU,WACRb,MAAM,8EAAD,OAC2EG,EAAK+B,IADhF,gBAC2F/B,EAAKiC,MAElGlB,MAAK,SAAC+C,GAAD,OAASA,EAAI/D,UAClBgB,MAAK,SAACf,GACL6D,EAAa7D,QAEhB,CAACA,EAAK+B,IAAK/B,EAAKiC,MAEnB,IAAI8B,EAAgB,GAYpB,OAXIH,IAEFG,EADmBH,EAAUxC,WAAW4C,WAAWC,MAAM,EAAG,IACjC1D,KAAI,SAACwC,GAC9B,IAAMmB,EAAS,GAIf,OAHAA,EAAOC,KAAOpB,EAAKqB,KAAKH,MAAM,GAAI,IAClCC,EAAO,mBAAqBnB,EAAK/C,KAAKqE,QAAQC,QAAQC,gBACtDL,EAAO,cAAgBnB,EAAK/C,KAAKqE,QAAQC,QAAQE,WAC1CN,MAKT,oCACGH,EAAcU,OAAS,GACtB,kBAAC,IAAD,CAAqBjC,MAAM,OAAOC,OAAO,OACvC,kBAAC,IAAD,CACEzC,KAAM+D,EACNW,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IAGV,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACE9D,KAAK,WACL8D,QAAQ,kBACRC,OAAO,UACPC,UAAW,CAAEC,EAAG,KAElB,kBAAC,IAAD,CAAMjE,KAAK,WAAW8D,QAAQ,aAAaC,OAAO,gB,iBC3B/CG,MA5Bf,WAAoB,IAAD,EACyBhF,mBAAS,CACjD2B,IAAK,QACLE,IAAK,UAHU,mBACVH,EADU,KACKuD,EADL,KAMjB,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACF,EAAA,EAAD,CAAMvC,MAAI,EAAC0C,GAAI,GAAIC,GAAI,IACrB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,qCACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,aAApB,uJAMF,kBAACN,EAAA,EAAD,CAAMvC,MAAI,EAAC0C,GAAI,GAAIC,GAAI,IACrB,kBAAC,EAAD,CACEpC,iBAAkB,SAACuC,GAAD,OAAWR,EAAiBQ,IAC9C/D,cAAeA,IAEjB,kBAAC6D,EAAA,EAAD,CAAYC,QAAQ,MAApB,4BACA,kBAAC,EAAD,CAAO5F,KAAM8B,O,qDCpBfgE,EAAY,CAChBzE,MAAO,QAAS0E,eAAgB,aAoGnBC,MAjGf,WACE,OACE,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACF,EAAA,EAAD,CAAMvC,MAAI,EAAC0C,GAAI,GAAIC,GAAI,IACrB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,2CAGA,kBAACK,EAAA,EAAD,CAAMC,UAAU,OACd,kBAACC,EAAA,EAAD,CACED,UAAU,IACVE,KAAK,gDACLC,OAAO,SACP9C,MAAOuC,GAEP,kBAACQ,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcC,QAAQ,cAExB,kBAACL,EAAA,EAAD,CACED,UAAU,IACVE,KAAK,iDACLC,OAAO,SACP9C,MAAOuC,GAEP,kBAACQ,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcC,QAAQ,kBAExB,kBAACL,EAAA,EAAD,CACED,UAAU,IACVE,KAAK,wCACLC,OAAO,SACP9C,MAAOuC,GAEP,kBAACQ,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcC,QAAQ,kBAExB,kBAACL,EAAA,EAAD,CACED,UAAU,IACVE,KAAK,8BACLC,OAAO,SACP9C,MAAOuC,GAEP,kBAACQ,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcC,QAAQ,cAExB,kBAACL,EAAA,EAAD,CACED,UAAU,IACVE,KAAK,2BACLC,OAAO,SACP9C,MAAOuC,GAEP,kBAACQ,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcC,QAAQ,kBAI1B,kBAACb,EAAA,EAAD,CAAYC,QAAQ,MAApB,uBACA,kBAACK,EAAA,EAAD,CAAMC,UAAU,OACd,kBAACC,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcC,QAAQ,oDAExB,kBAACL,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcC,QAAQ,uBAExB,kBAACL,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcC,QAAQ,qBAExB,kBAACL,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcC,QAAQ,2B,OClFnBC,MAff,WACE,OACE,kBAACnB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAShG,UAAU,YACzC,kBAAC8F,EAAA,EAAD,CAAMvC,MAAI,EAAC0C,GAAI,GAAIC,GAAI,IACrB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKc,MAAM,UAA/B,iO,kBCCFC,EAAQC,cAUC,SAASC,IACtB,OACE,kBAAC,IAAD,CAAQC,SAAS,QACf,kBAACC,EAAA,EAAD,CAAeJ,MAAOA,GACpB,kBAACrB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACF,EAAA,EAAD,CAAMvC,MAAI,EAAC0C,GAAI,GAAIC,GAAI,EAAGsB,GAAI,GAC5B,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YAvBhBN,EAAMQ,WAAWC,GAAjB,aACEC,SAAU,SACV3C,OAAQ,eACPiC,EAAMW,YAAYC,GAAG,MAAQ,CAC5BF,SAAU,SCJMG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAClB,EAAD,OAEFmB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrH,MAAK,SAAAsH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2ab477bf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../styles/nav.css\";\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <nav className=\"flex\">\r\n      <ul className=\"menu flex\">\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/info\">Info</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/about\">About</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","\r\nconst cykelDataAPI = `https:wfs-kbhkort.kk.dk/k101/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=k101:cykeldata_kk&outputFormat=json&SRSNAME=EPSG:4326`;\r\nconst cykelInfrastrukturAPI = `https://wfs-kbhkort.kk.dk/k101/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=k101:supercykelsti_inspektion_foto&SRSNAME=EPSG:4326&outputFormat=application%2Fjson`;\r\n\r\nasync function fetchCykelData() {\r\n    const response = await fetch(cykelDataAPI);\r\n    const data = await response.json();\r\n    const json = await data.features;\r\n    return json;\r\n}\r\n\r\nasync function fetchCykelInfrastrukturData() {\r\n    const response = await fetch(cykelInfrastrukturAPI);\r\n    const data = await response.json();\r\n    const json = await data.features;\r\n    return json;\r\n}\r\n\r\nexport {fetchCykelData, fetchCykelInfrastrukturData}","import React, { useState, useEffect, useRef } from \"react\";\r\nimport MapGL, { Marker, Popup } from \"react-map-gl\";\r\nimport { fetchCykelData, fetchCykelInfrastrukturData } from \"../data\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\n\r\nconst mapboxApiAccessToken = process.env.REACT_APP_MAP_BOX_API_ACCESS_TOKEN;\r\n\r\nfunction Map(props) {\r\n  const [cykelInfrastruktur, setCykelInfrastrukturData] = useState([]);\r\n  const map = useRef();\r\n  const isMountedRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const marRef = map.current.getMap();\r\n    isMountedRef.current = true;\r\n\r\n    fetchCykelData().then((json) => {\r\n      if (isMountedRef.current) {\r\n        marRef.on(\"load\", function () {\r\n          marRef.addSource(\"lines\", {\r\n            type: \"geojson\",\r\n            data: {\r\n              type: \"FeatureCollection\",\r\n              features: json.map((route) => {\r\n                return {\r\n                  type: \"Feature\",\r\n                  properties: {\r\n                    color: \"#F7455D\",\r\n                  },\r\n                  geometry: {\r\n                    type: \"LineString\",\r\n                    coordinates: route.geometry.coordinates[0],\r\n                  },\r\n                };\r\n              }),\r\n            },\r\n          });\r\n          marRef.addLayer({\r\n            id: \"lines\",\r\n            type: \"line\",\r\n            source: \"lines\",\r\n            paint: {\r\n              \"line-width\": 1,\r\n              \"line-color\": [\"get\", \"color\"],\r\n            },\r\n          });\r\n        });\r\n      }\r\n\r\n      return () => (isMountedRef.current = false);\r\n    });\r\n\r\n    fetchCykelInfrastrukturData().then((json) => {\r\n      setCykelInfrastrukturData(json);\r\n    });\r\n  }, []);\r\n\r\n  const [viewport, setViewport] = useState({\r\n    latitude: props.selectedPlace.lat,\r\n    longitude: props.selectedPlace.lon,\r\n    zoom: 11,\r\n    bearing: 0,\r\n    pitch: 0,\r\n  });\r\n\r\n  return (\r\n    <MapGL\r\n      ref={map}\r\n      {...viewport}\r\n      width=\"100%\"\r\n      height=\"40vh\"\r\n      mapStyle=\"mapbox://styles/olkaa/ckg3hhgiz1oxq1apg7n5zg5no\"\r\n      onViewportChange={(nextViewport) => setViewport(nextViewport)}\r\n      mapboxApiAccessToken={mapboxApiAccessToken}\r\n    >\r\n      {cykelInfrastruktur.map((item) => (\r\n        <div key={item.id}>\r\n          <Marker\r\n            longitude={item.geometry.coordinates[0][0]}\r\n            latitude={item.geometry.coordinates[0][1]}\r\n          >\r\n            <IconButton\r\n              aria-label=\"delete\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                const selectedPlace = {\r\n                  lat: item.geometry.coordinates[0][1],\r\n                  lon: item.geometry.coordinates[0][0],\r\n                };\r\n                props.getSelectedPlace(selectedPlace);\r\n              }}\r\n            >\r\n              <InfoIcon\r\n                style={{\r\n                  backgroundColor: \"#357a38\",\r\n                  color: \"#6fbf73\",\r\n                  borderRadius: \"15px\",\r\n                }}\r\n              />\r\n            </IconButton>\r\n          </Marker>\r\n          {item.geometry.coordinates[0][0] === props.selectedPlace.lon &&\r\n            item.geometry.coordinates[0][1] === props.selectedPlace.lat && (\r\n              <Popup\r\n                longitude={props.selectedPlace.lon}\r\n                latitude={props.selectedPlace.lat}\r\n              >\r\n                {item.properties.beskrivelse}\r\n              </Popup>\r\n            )}\r\n        </div>\r\n      ))}\r\n    </MapGL>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nfunction Graph(props) {\r\n  const { data } = props;\r\n  const [graphData, setGraphData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://api.met.no/weatherapi/locationforecast/2.0/complete?altitude=0&lat=${data.lat}&lon=${data.lon}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setGraphData(data);\r\n      });\r\n  }, [data.lat, data.lon]);\r\n\r\n  let renderedArray = [];\r\n  if (graphData) {\r\n    const shortArray = graphData.properties.timeseries.slice(0, 10);\r\n    renderedArray = shortArray.map((item) => {\r\n      const object = {};\r\n      object.name = item.time.slice(11, 16);\r\n      object[\"Temperature (C)\"] = item.data.instant.details.air_temperature;\r\n      object[\"Wind (m/s)\"] = item.data.instant.details.wind_speed;\r\n      return object;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {renderedArray.length > 0 && (\r\n        <ResponsiveContainer width=\"100%\" height=\"40%\">\r\n          <LineChart\r\n            data={renderedArray}\r\n            margin={{\r\n              top: 5,\r\n              right: 30,\r\n              left: 20,\r\n              bottom: 5,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"Temperature (C)\"\r\n              stroke=\"#8884d8\"\r\n              activeDot={{ r: 8 }}\r\n            />\r\n            <Line type=\"monotone\" dataKey=\"Wind (m/s)\" stroke=\"#357a38\" />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n","import React, { useState } from \"react\";\r\nimport \"fontsource-roboto\";\r\nimport Map from \"../components/Map\";\r\nimport Graph from \"../components/Graph\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nfunction MapPage() {\r\n  const [selectedPlace, setSelectedPlace] = useState({\r\n    lat: 55.6761,\r\n    lon: 12.5683,\r\n  });\r\n\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Grid item xs={11} sm={12}>\r\n        <Typography variant=\"h3\">Problems with bike infrastructure</Typography>\r\n        <Typography variant=\"subtitle1\">\r\n          Click on green info sign and the information about the problem on bike\r\n          path appears alongside with the temperature in this area in the near\r\n          future\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={11} sm={12}>\r\n        <Map\r\n          getSelectedPlace={(value) => setSelectedPlace(value)}\r\n          selectedPlace={selectedPlace}\r\n        />\r\n        <Typography variant=\"h3\">The weather in this area</Typography>\r\n        <Graph data={selectedPlace} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default MapPage;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport FiberManualRecordOutlinedIcon from \"@material-ui/icons/FiberManualRecordOutlined\";\r\n\r\nconst linkStyle = {\r\n  color: \"black\", textDecoration: 'underline'\r\n};\r\n\r\nfunction About() {\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Grid item xs={11} sm={12}>\r\n        <Typography variant=\"h3\">\r\n          In this project were used technologies:\r\n        </Typography>\r\n        <List component=\"nav\">\r\n          <ListItem\r\n            component=\"a\"\r\n            href=\"https://reactjs.org/docs/getting-started.html\"\r\n            target=\"_blank\"\r\n            style={linkStyle}\r\n          >\r\n            <ListItemIcon>\r\n              <FiberManualRecordOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"React.js\" />\r\n          </ListItem>\r\n          <ListItem\r\n            component=\"a\"\r\n            href=\"https://reactrouter.com/web/guides/quick-start\"\r\n            target=\"_blank\"\r\n            style={linkStyle}\r\n          >\r\n            <ListItemIcon>\r\n              <FiberManualRecordOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"React router\" />\r\n          </ListItem>\r\n          <ListItem\r\n            component=\"a\"\r\n            href=\"https://visgl.github.io/react-map-gl/\"\r\n            target=\"_blank\"\r\n            style={linkStyle}\r\n          >\r\n            <ListItemIcon>\r\n              <FiberManualRecordOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"React-Map-GL\" />\r\n          </ListItem>\r\n          <ListItem\r\n            component=\"a\"\r\n            href=\"https://recharts.org/en-US/\"\r\n            target=\"_blank\"\r\n            style={linkStyle}\r\n          >\r\n            <ListItemIcon>\r\n              <FiberManualRecordOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Recharts\" />\r\n          </ListItem>\r\n          <ListItem\r\n            component=\"a\"\r\n            href=\"https://material-ui.com/\"\r\n            target=\"_blank\"\r\n            style={linkStyle}\r\n          >\r\n            <ListItemIcon>\r\n              <FiberManualRecordOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Material-UI\" />\r\n          </ListItem>\r\n        </List>\r\n\r\n        <Typography variant=\"h3\">To run the project:</Typography>\r\n        <List component=\"nav\">\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <FiberManualRecordOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"clone repo: 'https://github.com/OlkaA/dhi.git'\" />\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <FiberManualRecordOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"run 'npm install'\" />\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <FiberManualRecordOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"run 'npm start'\" />\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <FiberManualRecordOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"enjoy the project\" />\r\n          </ListItem>\r\n        </List>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport \"../styles/homepage.css\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <Grid container justify=\"center\" className=\"homepage\">\r\n      <Grid item xs={11} sm={12}>\r\n        <Typography variant=\"h3\" align=\"center\">\r\n          This project was made to showcase bike paths in Copenhagen, the\r\n          problems that exist on these paths with exact location, and the\r\n          weather for those locations in the near future (probably for\r\n          roadworkers to fix problems).\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"fontsource-roboto\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navigation from \"./components/Navigation\";\nimport InfoPage from \"./pages/InfoPage\";\nimport About from \"./pages/About\";\nimport Home from \"./pages/Home\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme();\n\ntheme.typography.h3 = {\n  fontSize: \"1.2rem\",\n  margin: \"2rem 0 1rem\",\n  [theme.breakpoints.up(\"sm\")]: {\n    fontSize: \"2rem\",\n  },\n};\n\nexport default function App() {\n  return (\n    <Router basename=\"/dhi\">\n      <ThemeProvider theme={theme}>\n        <Grid container justify=\"center\">\n          <Grid item xs={12} sm={8} md={6}>\n            <Navigation />\n            <Switch>\n              <Route path=\"/info\">\n                <InfoPage />\n              </Route>\n              <Route path=\"/about\">\n                <About />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </Grid>\n        </Grid>\n      </ThemeProvider>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}